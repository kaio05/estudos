Módulo 4 - Curso de HTML + CSS


O que vamos aprender?

C22 - Iframe

C23 - Projeto redes sociais 

C24 - Formulários

C25 - Media query

Projeto final - Tela de Login

///////////////////////////////////////////

Capítulo 22

>> I(nline) frame

** Dentro da tag <iframe> e </iframe> você pode colocar algo que só aparece caso não haja compatibilidade
com o conteúdo **
 ______________________
|Muitos sites bloqueiam|
''''''''''''''''''''''''
Tamanho padrão 300x150

* CSS é soberano {
	configurações em CSS ganham prioridade em relação àquelas
	no próprio Iframe
}

>> Frameborder -> aceita 0 ou qualquer outra coisa  ==> Define se vai ter ou não a borda padrão

>> Scrolling -> auto, yes ou no --> dependendo do browser, não faz diferença

$$ Você pode colocar seus próprios sites no ifrane

---> para tabelas, é melhor vc usar a própria rolagem scroll-x ou scroll-y

** Para navegar entre páginas pelo seu iframe, você precisa:
1- Dar um nome ao seu iframe
2- Nos seus links, dar à propriedade target o valor do nome do seu iframe

====> Você pode colocar conteúdo HTML no seu iframe por meio do parâmetro srcdoc,
porém, o recomendado é você fazer um arquivo separado

exemplo.:

<iframe name="frame" srcdoc="<h1>Escolha uma das opções acima</h1><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Odio quidem itaque alias, debitis esse modi aliquam autem quibusdam et veniam. Quasi ipsum molestias nemo sequi, dolores eaque harum odit exercitationem.</p><img src='imagens/download.jpg'>" frameborder="0"></iframe>

%% É possível que haja problemas com iframes pelo google bot, então não coloque 
conteúdo vital nele %%
%% Há também problemas de acessibilidades com leitor de tela 
%% Os navegadores podem se confundir com o uso de funções no iframe
%% Cuidado com os sites que você usa, pois eles podem ter sido infectados e o iframe pode servir de porta para ataques
-> Crosssite e XSS

@@@@ Como tornar seu site mais seguro? @@@@@

atributo sandbox pode bloquear ou permitir certas ações no seu iframe;
ex.: sandbox="sandbox" --> não captura informação por sites externos

sandbox="allow-same-origin"  ---> permite coisas da mesma origem

atributo referrerpolicy="no-referrer" --> o conteúdo do iframe não coleta informação do usuário



""""""" Outras formas de usar iframes
> Vídeo
> Mapas
> Slides
> Planilhas

::-webkit-scroller {
	width: 0px;
	heigh: 0px;
}

>> esconde a barra de rolagem

/////////////////////////////////////////////////////

Capítulo 24


############ FORMULÁRIOS ################

formulários recebem informações do usuário e as armazenam para
serem utilizadas.

eles são delimitados por <form> e </form>

a forma
<form>
	<p>Título: <input type="text" name="dado"></p>
	<p><input type="submit" value="enviar"></p>
</form>
não é ideal pq não há ligação entre o título e a input

> Para resolver isso, podemos utilizar as labels e id

<form action="cadastro.php">
	<p><label for"nome">Nome:</label>
		<input type="text" id="nome"></p>
</form>

--> Isso facilita para os mecanismos de busca indexar o seu site e 
também melhorar a usabilidade.

$$ Para enviar os dados do formulário, podemos usar:
<form action="cadastro.php"> por exemplo

# É possível remover sugestões utilizando o atributo autocomplete
com o valor "off"


##### MÉTODOS DE ENVIO DE FORMULÁRIOS #####

1- GET (método padrão)
-> dados ficam visíveis na URL
-> usado para dados não sensíveis
-> só pode enviar até 3kb

2- POST 
-> não aparece na URL, mas pode ser encontrado nos Requests, na 
parte Network
-> dados sensíveis (cuidado)
-> mais de 3kb

** Para proteger seus dados, você terá que usar criptografia com
HTTPS


### Controles de formulário ###

>> Tipos de input

> password -> esconde o valor
> submit -> envia formulário
> reset -> limpa formulário
> month/date/time
> email --> tipo de e-mail, mas só verifica se tem ou não um @
> tel --> número de telefone, também não tem muitos filtros
> radio --> quando um é marcado, os outros de ***mesmo nome*** são desmarcados
> checkbox --> caixas que podem ser mutualmente marcadas
> color
> range
> file --> visitante escolhe
> image --> dev escolhe

** no caso de envio de arquivos, deve-se utilizar o método POST

**** Estudar RegEx
===> pattern="^[0-9]{4}-[0-9]{4}$" ==> exemplo de expressão regular para número de
telefone

exemplo.: pattern="^\(\d{2}\)\d{4,5}-\d{4}$"

>> esses padrões não são suficiente para impedir alguns tipos de dados errados,
essa verificação deve ser feita ou em js ou php


$$ Atributos de input

$ required -> evita que seja enviado formulário vazio
$ minlength/maxlength --> autoexplicativo
$ size --> diz quantas letras vai mostrar
$ placeholder --> mostra um texto dentro
$ autocomplete --> vai entrar no seu gerenciador de senhas (pode especificar o tipo de dado)
$ min/max --> valores numéricos mínimos e máximos
$ step --> intervalo entre valores válidos
$ value --> valor já preenchido
$ checked --> deixa a caixa marcada por padrão


======> !!!!!!  Guanabara mandou TESTAR EM OUTROS NAVEGADORES !!!!!! <=======

<fieldset> --> agrupamento de campo no formulário
<legend> --> legenda de grupo


### Elementos fora da tag input

<select name="estados" id="iest">    ====> lista de opções
	<option value="" selected>---Escolha---</option>
	<optgroup label="Região Sudeste">    ====> grupo de opções
		<option value="SP">São Paulo</option>  ====> opções individuais
		<option value="RJ">Rio de Janeiro</option>
		<option value="MG">Minas Gerais</option>
		<option value="ES">Espírito Santo</option>
	</optgroup>
</select>      

<select name="profissões" id="iprof">
	<input type="text" name="prof" list="iprof">  ===> atributo "list" indica lista de opções
	<datalist id="lisprof">  ====> lista com opções
		<option>Administrador</option>
		<option>Médico</option>
		<option>Bombeiro</option>
	</datalist>



*** Diferença: enquanto no primeiro caso as opções são restritas àquelas programadas,
no segundo caso, ele apenas vai sugerir opções, mas vai aceitar o que o usuário 
escrever.

--> 

<textarea> ---> aceita texto, pode-se limitar em colunas e em linhas visíveis,
porém a quantidade de linhas possíveis é infinita, logo, use o método POST


Tag <output> --> mostra coisas na tela com base no resultado de um cálculo de inputs
em javascript ou ação de um usuário no preenchimento dessas inputs

ex.:

<form oninput="x.value=parseInt(a.value)+parseInt(b.value)">
  <input type="range" id="a" value="50">
  +<input type="number" id="b" value="25">
  =<output name="x" for="a b"></output>
</form>


////////////////////////////////////////////////////////////////////////////////

@media queries

* Seu conteúdo pode ser exibido em diversas mídias diferentes

--> As media queries são o que garantem que seu conteúdo seja adequadamente em
diferentes mídias.
--> É um recurso que adapta seu conteúdo a diferentes mídias/tamanhos de tela

Ex.:

<link rel="stylesheet" href="estilos/tela.css" media="screen">
--> media query para apresentação em tela

<link rel="stylesheet" href="estilos/impressora.css" media="print">
--> media query para impressão   ===> media types


Media query = media types + media features

---> media features são colocados entre parênteses e indicam o tamanho da tela ou
orientação

ex.:

<link rel="stylesheet" href="estilos/style.css" media="all">
<link rel="stylesheet" href="estilos/retrato.css" media="screen and (orientation:portrait)">
<link rel="stylesheet" href="estilo/paisagem.css" media="screen and (orientation:portrait)">


>> O primeiro link utiliza um media type para todos os tipos de mídia, seja tela, impressora
etc.
>> O segundo apresenta um media feature que indica orientação retrato da tela,
enquanto o terceiro tem um media feature para tela em paisagem.


>> Outra forma de usar media queries é dentro de um arquivo CSS ou do elemento
<style>

@media screen and (orientation: portrait) {
	Configurações para retrato
}


>>>>>>>>>> Mobile first <<<<<<<<<<<<<

Abordagem onde se constrói seu site *primeiro na versão móvel* para depois adaptar
para o computador, evitando perder na experiência do usuário.

### vantagens

# facilidade na divulgação pelas ferramentas de busca
# melhoria na UX
# aumento de credibilidade
# + performance


%%%%%%%%  Projeto - Resposta visual para mídias diferentes %%%%%%%%%%

$$ Typical devices breakpoints - definir limites de tipos de tela
------------------------------------------------------------------
pequenas telas - <= 600px
celular - 600px - 768px
tablet - 768px - 992px
desktop - 992px - 1200px
grandes telas - >= 1200px 

** Precisam de atualização com o tempo, então pesquise!

====> Impressora não funciona background